import { Stopwatch } from '@sapphire/stopwatch';
import chalk from 'chalk';
import { gray, isColorSupported } from 'colorette';
import { Console } from 'node:console';
import fs from 'node:fs';
import path from 'node:path';
import url from 'node:url';
import { inspect, type InspectOptions } from 'node:util';
import prettier from 'prettier';
import Package from '../../package.json' with { type: 'json' };
import RouteMap from '../configuration/Routes.json' with { type: 'json' };

interface SitemapObject {
	description: string;
	label: string;
	href: string;
}

const Map: Array<SitemapObject> = RouteMap;
const XMLArray: Array<string> = [];

const PrettierConfig: prettier.Options = {
	parser: 'typescript',
	arrowParens: 'always',
	bracketSameLine: true,
	bracketSpacing: true,
	endOfLine: 'crlf',
	htmlWhitespaceSensitivity: 'css',
	jsxSingleQuote: true,
	printWidth: 120,
	proseWrap: 'preserve',
	quoteProps: 'as-needed',
	semi: true,
	tabWidth: 8,
	trailingComma: 'es5',
	useTabs: true,
};

function getDateString(date = new Date()) {
	return date.toISOString().slice(0, 10).replace(/-/g, '/');
}

class Logger {
	protected preprocess(values: readonly unknown[]) {
		const inspectOptions: InspectOptions = { colors: isColorSupported, depth: 0 };
		return values
			.map((value) => (typeof value === 'string' ? value : inspect(value, inspectOptions)))
			.join(' ');
	}

	info(...values: readonly unknown[]) {
		const Time = new Date().toLocaleTimeString();

		new Console(process.stdout).info(
			gray(Time),
			chalk.bold(chalk.magenta('[sitemap]')),
			this.preprocess(values)
		);
	}
}

export class Sitemap {
	private readonly logger = new Logger();

	private readonly __filename = url.fileURLToPath(import.meta.url);
	private readonly __dirname = path.dirname(this.__filename);
	private readonly publicDirectory = path.join(this.__dirname, '../../public');

	async run(port?: number) {
		const stopwatch = new Stopwatch();
		this.logger.info('Building new Sitemap.xml...');

		const Hostname: string =
			process.env.NODE_ENV === 'development'
				? `http://localhost:${port ?? '5173'}`
				: Package.homepage;

		for (const Route of Map)
			XMLArray.push(`<url>
    <!-- Location Name: ${Route.label} -->
    <loc>${Hostname}${Route.href}</loc>
    <lastmod>${getDateString()}</lastmod>
    <changefreq>always</changefreq>
    <priority>0.7</priority>
</url>`);

		const XML = `<!-- Generated by Sitemap.ts by ninjaninja140. -->
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
${XMLArray.join('\n\n')}
</urlset>
`;

		const sitemapContent = await prettier.format(XML, {
			...PrettierConfig,
			parser: 'xml',
			plugins: ['@prettier/plugin-xml'],
		});

		fs.writeFileSync(
			path.join(this.publicDirectory, 'sitemap.xml'),
			'<?xml version="1.0" encoding="UTF-8"?>\n' + sitemapContent
		);

		this.logger.info(
			'Sitemap.xml built successfully!',
			chalk.italic(chalk.gray(`(${stopwatch.stop().toString()})`))
		);
	}
}

await new Sitemap().run();

