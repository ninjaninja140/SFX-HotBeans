import { existsSync, readdirSync, readFileSync, writeFileSync } from 'fs';
import { basename, dirname, join, relative, resolve } from 'path';
import { format } from 'prettier';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const pagesDirectory = join(__dirname, 'src/pages');

const sitemap = [];

function capitalize(str) {
	return str.charAt(0).toUpperCase() + str.slice(1);
}

function formatName(str) {
	const formatted = str.replace(/^(\d+)(.*)/, (_, num, rest) => `${rest}${num}`);
	return formatted.replace(/[-_\/](\w)/g, (_, c) => (c ? c.toUpperCase() : ''));
}

function getTSXFiles(dir) {
	const dirents = readdirSync(dir, { withFileTypes: true });
	let files = [];

	for (const dirent of dirents) {
		const fullPath = resolve(dir, dirent.name);

		if (dirent.isDirectory()) files = files.concat(getTSXFiles(fullPath));
		else if (dirent.isFile() && dirent.name.endsWith('.tsx')) files.push(fullPath);
	}

	return files;
}

const tsxFiles = getTSXFiles(pagesDirectory);

const indexContent = tsxFiles
	.map((file) => {
		const relativePath = `@pages/${relative(pagesDirectory, file).replace(/\\/g, '/').replace('.tsx', '')}`;
		const fileName = basename(file, '.tsx');
		const dirName = dirname(relative(pagesDirectory, file)).replace(/\\/g, '/');

		const isRoot = dirName === '.';
		const uniqueExportName = isRoot
			? capitalize(formatName(fileName))
			: capitalize(formatName(`${dirName}/${fileName}`));

		return `import ${uniqueExportName} from '${relativePath}';`;
	})
	.join('\n');

function readMetaFile(filePath) {
	const metaFilePath = `${filePath}.meta.json`;
	if (existsSync(metaFilePath)) {
		return JSON.parse(readFileSync(metaFilePath, 'utf8'));
	}
	return {};
}

function generateRoutes() {
	let routes = [];

	for (const file of tsxFiles) {
		const fileName = basename(file, '.tsx');
		const relativePath = `./${relative(pagesDirectory, file).replace(/\\/g, '/').replace('.tsx', '')}`;
		const dirName = dirname(relative(pagesDirectory, file)).replace(/\\/g, '/');

		const meta = readMetaFile(file.replace('.tsx', ''));
		const componentName = capitalize(formatName(dirName === '.' ? fileName : `${dirName}/${fileName}`));

		const description = meta.description ? `'${meta.description}'` : undefined;
		const params = meta.params ? meta.params.map((p) => `/:${p}`).join('/') : '';

		const isIndexFile = fileName === 'index';
		const locationName = meta.name ? meta.name : capitalize(fileName);
		const location = meta.location ? meta.location.toLowerCase() : undefined;

		const locked = meta.locked ? (meta.locked === true ? true : false) : false;

		let routePath = location
			? location
			: isIndexFile
				? dirName === '.'
					? '/'
					: `/${dirName}`
				: relativePath.replace(/^\.\//, '/');

		routePath += params;

		routes.push({
			path: routePath.toLowerCase(),
			element: locked
				? `(process.env.NODE_ENV === 'development' ? <${componentName} Location='${locationName}' Description={${description}} /> : <Unauthorised/>)`
				: `<${componentName} Location='${locationName}' Description={${description}} />`,
			index: isIndexFile,
		});

		if (!path.contains('*') || !locked)
			sitemap.push({
				href: routePath.toLowerCase(),
				description: description
					? description
					: 'Design websites alongside professionals. Design with HotBeans website developers.',
				label: locationName,
			});

		console.log(
			`Generated Route '${locationName}' from ${fileName}.tsx with location ${routePath.toLowerCase()}`
		);
	}

	return routes;
}

console.log('Generating router file...');

const router = {
	path: '/',
	children: generateRoutes(),
};

const finalOutput = await format(
	`// Generated by Router.js by ninjaninja140.

// Dependency Imports
import { createBrowserRouter, RouterProvider } from 'react-router-dom';
import Unauthorised from '@components/Unauthorised';

// Page Imports
${indexContent}

// Router Object
const router = createBrowserRouter([{
  path: '${router.path}',
  children: ${JSON.stringify(router.children, null, 2)
		.replace(/"(<.*?>)"/g, '$1')
		.replace(/"(\(.*?\))"/g, '$1')
		.replace(/: (true|false)/g, ': $1')}
}]);

// Router Exports
export default () => <RouterProvider router={router} />
`,
	{
		parser: 'typescript',
		arrowParens: 'always',
		bracketSameLine: true,
		bracketSpacing: true,
		endOfLine: 'crlf',
		htmlWhitespaceSensitivity: 'css',
		jsxSingleQuote: true,
		printWidth: 120,
		proseWrap: 'preserve',
		quoteProps: 'as-needed',
		semi: true,
		tabWidth: 8,
		trailingComma: 'es5',
		useTabs: true,
	}
);

writeFileSync(join(pagesDirectory, '../router.tsx'), finalOutput);

console.log('Router file generated successfully!');

